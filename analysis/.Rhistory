summarise(terms = list(term)) %>%
mutate(terms = map(terms, paste, collapse = ", ")) %>%
unnest()
gamma_terms <- td_gamma %>%
group_by(topic) %>%
summarise(gamma = mean(gamma)) %>%
arrange(asc(topic)) %>%
left_join(top_terms, by = "topic") %>%
mutate(topic = paste0("Topic ", topic),
topic = reorder(topic, gamma))
# Plot topic proportions
td_gamma <- tidy(stm_model, matrix = "gamma",
document_names = rownames(dfm_lyricsCorpus_filtered))
td_beta <- tidy(stm_model)
top_terms <- td_beta %>%
arrange(beta) %>%
group_by(topic) %>%
top_n(7, beta) %>%
arrange(-beta) %>%
select(topic, term) %>%
summarise(terms = list(term)) %>%
mutate(terms = map(terms, paste, collapse = ", ")) %>%
unnest()
gamma_terms <- td_gamma %>%
group_by(topic) %>%
summarise(gamma = mean(gamma)) %>%
arrange(asce(topic)) %>%
left_join(top_terms, by = "topic") %>%
mutate(topic = paste0("Topic ", topic),
topic = reorder(topic, gamma))
# Plot topic proportions
td_gamma <- tidy(stm_model, matrix = "gamma",
document_names = rownames(dfm_lyricsCorpus_filtered))
td_beta <- tidy(stm_model)
top_terms <- td_beta %>%
arrange(beta) %>%
group_by(topic) %>%
top_n(7, beta) %>%
arrange(-beta) %>%
select(topic, term) %>%
summarise(terms = list(term)) %>%
mutate(terms = map(terms, paste, collapse = ", ")) %>%
unnest()
gamma_terms <- td_gamma %>%
group_by(topic) %>%
summarise(gamma = mean(gamma)) %>%
arrange(asc(topic)) %>%
left_join(top_terms, by = "topic") %>%
mutate(topic = paste0("Topic ", topic),
topic = reorder(topic, gamma))
# Plot topic proportions
td_gamma <- tidy(stm_model, matrix = "gamma",
document_names = rownames(dfm_lyricsCorpus_filtered))
td_beta <- tidy(stm_model)
top_terms <- td_beta %>%
arrange(beta) %>%
group_by(topic) %>%
top_n(7, beta) %>%
arrange(-beta) %>%
select(topic, term) %>%
summarise(terms = list(term)) %>%
mutate(terms = map(terms, paste, collapse = ", ")) %>%
unnest()
gamma_terms <- td_gamma %>%
group_by(topic) %>%
summarise(gamma = mean(gamma)) %>%
arrange(topic) %>%
left_join(top_terms, by = "topic") %>%
mutate(topic = paste0("Topic ", topic),
topic = reorder(topic, gamma))
new_names <- c("Vocal Expressions", "Love", "Feelings and Friendship", "Conversational and Family",
"Journey", "Dark Imagery", "Aspiration", "Party", "Male Terms", "Change and Departure",
"Desire", "Expletives", "Reflection", "Spirituality", "Sociopolitical", "Romance",
"Street Life and Expletives", "Tonight", "Exclamations", "Knowledge")
# Replace the topic column in gamma_terms with the new names
gamma_terms$topic_new <- factor(gamma_terms$topic, labels = new_names)
gamma_terms %>%
top_n(20, gamma) %>%
ggplot(aes(topic, gamma, label = terms, fill = topic)) +
geom_col(show.legend = FALSE) +
geom_text(hjust = 0, nudge_y = 0.0005, size = 3) +
coord_flip() +
scale_y_continuous(expand = c(0,0),
limits = c(0, 0.22)) +
theme_calc() +
theme(plot.title = element_text(size = 16),
plot.subtitle = element_text(size = 13)) +
labs(x = NULL, y = expression("Expected Topic Proportions"))
# Replace the topic column in gamma_terms with the new names
gamma_terms$topic_new <- new_names
# Plot topic proportions
td_gamma <- tidy(stm_model, matrix = "gamma",
document_names = rownames(dfm_lyricsCorpus_filtered))
td_beta <- tidy(stm_model)
top_terms <- td_beta %>%
arrange(beta) %>%
group_by(topic) %>%
top_n(7, beta) %>%
arrange(-beta) %>%
select(topic, term) %>%
summarise(terms = list(term)) %>%
mutate(terms = map(terms, paste, collapse = ", ")) %>%
unnest()
gamma_terms <- td_gamma %>%
group_by(topic) %>%
summarise(gamma = mean(gamma)) %>%
arrange(topic) %>%
left_join(top_terms, by = "topic") %>%
mutate(topic = paste0("Topic ", topic),
topic = reorder(topic, gamma))
new_names <- c("Vocal Expressions", "Love", "Feelings and Friendship", "Conversational and Family",
"Journey", "Dark Imagery", "Aspiration", "Party", "Male Terms", "Change and Departure",
"Desire", "Expletives", "Reflection", "Spirituality", "Sociopolitical", "Romance",
"Street Life and Expletives", "Tonight", "Exclamations", "Knowledge")
# Replace the topic column in gamma_terms with the new names
gamma_terms$topic_new <- new_names
gamma_terms %>%
top_n(20, gamma) %>%
ggplot(aes(topic, gamma, label = terms, fill = topic)) +
geom_col(show.legend = FALSE) +
geom_text(hjust = 0, nudge_y = 0.0005, size = 3) +
coord_flip() +
scale_y_continuous(expand = c(0,0),
limits = c(0, 0.22)) +
theme_calc() +
theme(plot.title = element_text(size = 16),
plot.subtitle = element_text(size = 13)) +
labs(x = NULL, y = expression("Expected Topic Proportions"))
gamma_terms %>%
top_n(20, gamma) %>%
ggplot(aes(topic_new, gamma, label = terms, fill = topic)) +
geom_col(show.legend = FALSE) +
geom_text(hjust = 0, nudge_y = 0.0005, size = 3) +
coord_flip() +
scale_y_continuous(expand = c(0,0),
limits = c(0, 0.22)) +
theme_calc() +
theme(plot.title = element_text(size = 16),
plot.subtitle = element_text(size = 13)) +
labs(x = NULL, y = expression("Expected Topic Proportions"))
gamma_terms <- gamma_terms%?%
arrange(desc(gamma))
gamma_terms <- gamma_terms %>%
arrange(desc(gamma))
gamma_terms %>%
top_n(20, gamma) %>%
ggplot(aes(topic_new, gamma, label = terms, fill = topic)) +
geom_col(show.legend = FALSE) +
geom_text(hjust = 0, nudge_y = 0.0005, size = 3) +
coord_flip() +
scale_y_continuous(expand = c(0,0),
limits = c(0, 0.22)) +
theme_calc() +
theme(plot.title = element_text(size = 16),
plot.subtitle = element_text(size = 13)) +
labs(x = NULL, y = expression("Expected Topic Proportions"))
gamma_terms %>%
top_n(20, gamma) %>%
ggplot(aes(topic, gamma, label = terms, fill = topic)) +
geom_col(show.legend = FALSE) +
geom_text(hjust = 0, nudge_y = 0.0005, size = 3) +
coord_flip() +
scale_y_continuous(expand = c(0,0),
limits = c(0, 0.22)) +
theme_calc() +
theme(plot.title = element_text(size = 16),
plot.subtitle = element_text(size = 13)) +
labs(x = NULL, y = expression("Expected Topic Proportions"))
# Replace the topic column in gamma_terms with the new names
gamma_terms$topic <- new_names
gamma_terms <- gamma_terms %>%
arrange(desc(gamma))
gamma_terms %>%
top_n(20, gamma) %>%
ggplot(aes(topic, gamma, label = terms, fill = topic)) +
geom_col(show.legend = FALSE) +
geom_text(hjust = 0, nudge_y = 0.0005, size = 3) +
coord_flip() +
scale_y_continuous(expand = c(0,0),
limits = c(0, 0.22)) +
theme_calc() +
theme(plot.title = element_text(size = 16),
plot.subtitle = element_text(size = 13)) +
labs(x = NULL, y = expression("Expected Topic Proportions"))
# Plot topic proportions
td_gamma <- tidy(stm_model, matrix = "gamma",
document_names = rownames(dfm_lyricsCorpus_filtered))
td_beta <- tidy(stm_model)
top_terms <- td_beta %>%
arrange(beta) %>%
group_by(topic) %>%
top_n(7, beta) %>%
arrange(-beta) %>%
select(topic, term) %>%
summarise(terms = list(term)) %>%
mutate(terms = map(terms, paste, collapse = ", ")) %>%
unnest()
gamma_terms <- td_gamma %>%
group_by(topic) %>%
summarise(gamma = mean(gamma)) %>%
arrange(topic) %>%
left_join(top_terms, by = "topic") %>%
mutate(topic = paste0("Topic ", topic),
topic = reorder(topic, gamma))
new_names <- c("Vocal Expressions", "Love", "Feelings and Friendship", "Conversational and Family",
"Journey", "Dark Imagery", "Aspiration", "Party", "Male Terms", "Change and Departure",
"Desire", "Expletives", "Reflection", "Spirituality", "Sociopolitical", "Romance",
"Street Life and Expletives", "Tonight", "Exclamations", "Knowledge")
# Replace the topic column in gamma_terms with the new names
gamma_terms$topic_label <- new_names
gamma_terms <- gamma_terms %>%
arrange(desc(gamma))
gamma_terms %>%
top_n(20, gamma) %>%
ggplot(aes(topic, gamma, label = terms, fill = topic)) +
geom_col(show.legend = FALSE) +
geom_text(hjust = 0, nudge_y = 0.0005, size = 3) +
coord_flip() +
scale_y_continuous(expand = c(0,0),
limits = c(0, 0.22)) +
theme_calc() +
theme(plot.title = element_text(size = 16),
plot.subtitle = element_text(size = 13)) +
labs(x = NULL, y = expression("Expected Topic Proportions"))
gamma_terms %>%
top_n(20, gamma) %>%
ggplot(aes(topic_label, gamma, label = terms, fill = topic)) +
geom_col(show.legend = FALSE) +
geom_text(hjust = 0, nudge_y = 0.0005, size = 3) +
coord_flip() +
scale_y_continuous(expand = c(0,0),
limits = c(0, 0.22)) +
theme_calc() +
theme(plot.title = element_text(size = 16),
plot.subtitle = element_text(size = 13)) +
labs(x = NULL, y = expression("Expected Topic Proportions"))
View(td_gamma)
View(td_beta)
View(top_terms)
# Plot topic proportions
td_gamma <- tidy(stm_model, matrix = "gamma",
document_names = rownames(dfm_lyricsCorpus_filtered))
td_beta <- tidy(stm_model)
top_terms <- td_beta %>%
arrange(beta) %>%
group_by(topic) %>%
top_n(7, beta) %>%
arrange(-beta) %>%
select(topic, term) %>%
summarise(terms = list(term)) %>%
mutate(terms = map(terms, paste, collapse = ", ")) %>%
unnest()
new_names <- c("Vocal Expressions", "Love", "Feelings and Friendship", "Conversational and Family",
"Journey", "Dark Imagery", "Aspiration", "Party", "Male Terms", "Change and Departure",
"Desire", "Expletives", "Reflection", "Spirituality", "Sociopolitical", "Romance",
"Street Life and Expletives", "Tonight", "Exclamations", "Knowledge")
top_terms$topic_label <- new_names
gamma_terms <- td_gamma %>%
group_by(topic) %>%
summarise(gamma = mean(gamma)) %>%
arrange(topic) %>%
left_join(top_terms, by = "topic") %>%
mutate(topic = paste0("Topic ", topic),
topic = reorder(topic, gamma))
gamma_terms <- gamma_terms %>%
arrange(desc(gamma))
gamma_terms %>%
top_n(20, gamma) %>%
ggplot(aes(topic_label, gamma, label = terms, fill = topic)) +
geom_col(show.legend = FALSE) +
geom_text(hjust = 0, nudge_y = 0.0005, size = 3) +
coord_flip() +
scale_y_continuous(expand = c(0,0),
limits = c(0, 0.22)) +
theme_calc() +
theme(plot.title = element_text(size = 16),
plot.subtitle = element_text(size = 13)) +
labs(x = NULL, y = expression("Expected Topic Proportions"))
# Plot topic proportions
td_gamma <- tidy(stm_model, matrix = "gamma",
document_names = rownames(dfm_lyricsCorpus_filtered))
td_beta <- tidy(stm_model)
top_terms <- td_beta %>%
arrange(beta) %>%
group_by(topic) %>%
top_n(7, beta) %>%
arrange(-beta) %>%
select(topic, term) %>%
summarise(terms = list(term)) %>%
mutate(terms = map(terms, paste, collapse = ", ")) %>%
unnest()
new_names <- c("Vocal Expressions", "Love", "Feelings and Friendship", "Conversational and Family",
"Journey", "Dark Imagery", "Aspiration", "Party", "Male Terms", "Change and Departure",
"Desire", "Expletives", "Reflection", "Spirituality", "Sociopolitical", "Romance",
"Street Life and Expletives", "Tonight", "Exclamations", "Knowledge")
top_terms$topic_label <- new_names
gamma_terms <- td_gamma %>%
group_by(topic) %>%
summarise(gamma = mean(gamma)) %>%
arrange(desc(gamma)) %>%
left_join(top_terms, by = "topic") %>%
mutate(topic = paste0("Topic ", topic),
topic = reorder(topic, gamma))
gamma_terms <- gamma_terms %>%
gamma_terms %>%
top_n(20, gamma) %>%
ggplot(aes(topic_label, gamma, label = terms, fill = topic)) +
geom_col(show.legend = FALSE) +
geom_text(hjust = 0, nudge_y = 0.0005, size = 3) +
coord_flip() +
scale_y_continuous(expand = c(0,0),
limits = c(0, 0.22)) +
theme_calc() +
theme(plot.title = element_text(size = 16),
plot.subtitle = element_text(size = 13)) +
labs(x = NULL, y = expression("Expected Topic Proportions"))
gamma_terms %>%
top_n(20, gamma) %>%
ggplot(aes(topic_label, gamma, label = terms, fill = topic)) +
geom_col(show.legend = FALSE) +
geom_text(hjust = 0, nudge_y = 0.0005, size = 3) +
coord_flip() +
scale_y_continuous(expand = c(0,0),
limits = c(0, 0.22)) +
theme_calc() +
theme(plot.title = element_text(size = 16),
plot.subtitle = element_text(size = 13)) +
labs(x = NULL, y = expression("Expected Topic Proportions"))
gamma_terms %>%
top_n(20, gamma) %>%
ggplot(aes(topic, gamma, label = terms, fill = topic)) +
geom_col(show.legend = FALSE) +
geom_text(hjust = 0, nudge_y = 0.0005, size = 3) +
coord_flip() +
scale_y_continuous(expand = c(0,0),
limits = c(0, 0.22)) +
theme_calc() +
theme(plot.title = element_text(size = 16),
plot.subtitle = element_text(size = 13)) +
labs(x = NULL, y = expression("Expected Topic Proportions"))
gamma_terms %>%
top_n(20, gamma) %>%
ggplot(aes(topic_label, gamma, label = terms, fill = topic_label)) +
geom_col(show.legend = FALSE) +
geom_text(hjust = 0, nudge_y = 0.0005, size = 3) +
coord_flip() +
scale_y_continuous(expand = c(0,0),
limits = c(0, 0.22)) +
theme_calc() +
theme(plot.title = element_text(size = 16),
plot.subtitle = element_text(size = 13)) +
labs(x = NULL, y = expression("Expected Topic Proportions"))
function (x, n, wt)
gamma_terms %>%
top_n(20, gamma) %>%
mutate(topic_label = factor(topic_label, levels = rev(unique(topic_label)))) %>%
ggplot(aes(topic_label, gamma, label = terms, fill = topic_label)) +
geom_col(show.legend = FALSE) +
geom_text(hjust = 0, nudge_y = 0.0005, size = 3) +
coord_flip() +
scale_y_continuous(expand = c(0,0),
limits = c(0, 0.22)) +
theme_calc() +
theme(plot.title = element_text(size = 16),
plot.subtitle = element_text(size = 13)) +
labs(x = NULL, y = expression("Expected Topic Proportions"))
gamma_terms %>%
top_n(20, gamma) %>%
ggplot(aes(topic_label, gamma, label = terms, fill = topic_label)) +
geom_col(show.legend = FALSE) +
geom_text(hjust = 0, nudge_y = 0.0005, size = 3) +
coord_flip() +
scale_y_continuous(expand = c(0,0),
limits = c(0, 0.22)) +
theme_calc() +
theme(plot.title = element_text(size = 16),
plot.subtitle = element_text(size = 13)) +
labs(x = NULL, y = expression("Expected Topic Proportions"))
gamma_terms %>%
top_n(20, gamma) %>%
mutate(topic_label = factor(topic_label, levels = rev(unique(topic_label)))) %>%
ggplot(aes(topic_label, gamma, label = terms, fill = topic_label)) +
geom_col(show.legend = FALSE) +
geom_text(hjust = 0, nudge_y = 0.0005, size = 3) +
coord_flip() +
scale_y_continuous(expand = c(0,0),
limits = c(0, 0.22)) +
theme_calc() +
theme(plot.title = element_text(size = 16),
plot.subtitle = element_text(size = 13)) +
labs(x = NULL, y = expression("Expected Topic Proportions"))
gamma_terms %>%
top_n(20, gamma) %>%
mutate(topic_label = factor(topic_label, levels = rev(unique(topic_label)))) %>%
ggplot(aes(topic_label, gamma, label = terms, fill = topic_label)) +
geom_col(show.legend = FALSE) +
geom_text(hjust = 0, nudge_y = 0.0005, size = 3) +
coord_flip() +
scale_y_continuous(expand = c(0,0),
limits = c(0, 0.22)) +
theme_calc() +
theme(plot.title = element_text(size = 16),
plot.subtitle = element_text(size = 13),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())) +
gamma_terms %>%
top_n(20, gamma) %>%
mutate(topic_label = factor(topic_label, levels = rev(unique(topic_label)))) %>%
ggplot(aes(topic_label, gamma, label = terms, fill = topic_label)) +
geom_col(show.legend = FALSE) +
geom_text(hjust = 0, nudge_y = 0.0005, size = 3) +
coord_flip() +
scale_y_continuous(expand = c(0,0),
limits = c(0, 0.22)) +
theme_calc() +
theme(plot.title = element_text(size = 16),
plot.subtitle = element_text(size = 13)
panel.grid.major = element_blank(),
gamma_terms %>%
top_n(20, gamma) %>%
mutate(topic_label = factor(topic_label, levels = rev(unique(topic_label)))) %>%
ggplot(aes(topic_label, gamma, label = terms, fill = topic_label)) +
geom_col(show.legend = FALSE) +
geom_text(hjust = 0, nudge_y = 0.0005, size = 3) +
coord_flip() +
scale_y_continuous(expand = c(0,0),
limits = c(0, 0.22)) +
theme_calc() +
theme(plot.title = element_text(size = 16),
plot.subtitle = element_text(size = 13),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
labs(x = NULL, y = expression("Expected Topic Proportions"))
ggsave("../figures/Topic proportions.png", width = 23, height = 15, units = "cm")
gamma_terms %>%
top_n(20, gamma) %>%
mutate(topic_label = factor(topic_label, levels = rev(unique(topic_label)))) %>%
ggplot(aes(topic_label, gamma, label = terms, fill = topic_label)) +
geom_col(show.legend = FALSE) +
geom_text(hjust = 0, nudge_y = 0.0005, size = 3) +
coord_flip() +
scale_y_continuous(expand = c(0,0),
limits = c(0, 0.22)) +
theme_calc() +
theme(plot.title = element_text(size = 16),
plot.subtitle = element_text(size = 13),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
labs(x = NULL, y = expression("Expected Topic Proportions"))
# Assuming 'genre' is a variable in your 'meta_data' dataframe
# First, calculate the average topic proportions by genre
gamma_by_genre <- gamma_terms %>%
group_by(genre, topic_label) %>%
summarise(avg_gamma = mean(gamma)) %>%
arrange(genre, desc(avg_gamma)) %>%
group_by(genre) %>%
top_n(1, avg_gamma)  # Select the top topic for each genre
View(lyricsCorpus_tokenized)
View(lyrics_data)
# Assuming 'genre' is a variable in your 'meta_data' dataframe
# First, calculate the average topic proportions by genre
gamma_by_genre <- gamma_terms %>%
group_by(tag, topic_label) %>%
summarise(avg_gamma = mean(gamma)) %>%
arrange(genre, desc(avg_gamma)) %>%
group_by(genre) %>%
top_n(1, avg_gamma)  # Select the top topic for each genre
load("~/Documents/MASTERS/Text mining/data/new model.Data.RData")
library(sf)
library(tidyverse)
library(stm)
library(topicmodels)
library(lda)
library(quanteda)
library(quanteda.textplots)
library(slam)
library(quanteda)
library(dplyr)
library(ggplot2)
library(tidystm)
library(RColorBrewer)
library(ggthemes)
library(gridExtra)
library(tidytext)
# Define the color palette
my_palette <- brewer.pal(9, "Set1")
# Set directory
DIR <- '.'
# Filter for relevant topics
topics_data <- effect %>%
filter(topic %in% c(17))
# Estimate time effect
time_effect <- estimateEffect(1:20 ~ s(date), stm_model, meta = meta_data, uncertainty = "Global")
effect <- extract.estimateEffect(time_effect, "date", model = stm_model, method = "pointestimate")
# Filter for relevant topics
topics_data <- effect %>%
filter(topic %in% c(17))
# Now plot using ggplot2
ggplot(topics_data, aes(x = covariate.value, y = estimate, group = topic, color = as.factor(topic))) +
geom_line() +
scale_color_manual(values = my_palette, labels = c("Topic 1", "Topic 2")) +
theme_calc() +
labs(x = "Release Year", y = "Expected Topic Proportions", color = "Topic")
# Filter for relevant topics
topics_data <- effect %>%
filter(topic %in% c(2, 17))
# Now plot using ggplot2
ggplot(topics_data, aes(x = covariate.value, y = estimate, group = topic, color = as.factor(topic))) +
geom_line() +
scale_color_manual(values = my_palette, labels = c("Topic 1", "Topic 2")) +
theme_calc() +
labs(x = "Release Year", y = "Expected Topic Proportions", color = "Topic")
