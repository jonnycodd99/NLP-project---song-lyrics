pop_df_filtered <- pop_df %>%
filter(topic %in% average_gamma_pop$topic)
#rap
average_gamma_rap <- rap_df %>%
group_by(topic) %>%
summarise(avg_gamma = mean(estimate, na.rm = TRUE)) %>%
arrange(desc(avg_gamma)) %>%
slice(1:5) # Select the top 5 topics based on average gamma
# Then, filter your main dataframe to only include these top 5 topics
rap_df_filtered <- rap_df %>%
filter(topic %in% average_gamma_rap$topic)
#country
average_gamma_country <- country_df %>%
group_by(topic) %>%
summarise(avg_gamma = mean(estimate, na.rm = TRUE)) %>%
arrange(desc(avg_gamma)) %>%
slice(1:5) # Select the top 5 topics based on average gamma
# Then, filter your main dataframe to only include these top 5 topics
country_df_filtered <- country_df %>%
filter(topic %in% average_gamma_country$topic)
genre_dfs_filtered <- list(
rock = rock_df_filtered,
rb = rb_df_filtered,
pop = pop_df_filtered,
rap = rap_df_filtered,
country = country_df_filtered
)
# Use lapply to create a plot for each data frame
plots <- lapply(genre_dfs_filtered, function(df) {
ggplot(df, aes(x = covariate.value, y = estimate, group = topic, color = as.factor(topic))) +
geom_line() +
geom_line(aes(y = ci.lower), linetype = "dashed") +
geom_line(aes(y = ci.upper), linetype = "dashed") +
theme_minimal() +
theme(legend.position = "right") +
labs(x = "Release Year", y = "Expected Topic Proportions", color = "Topic")
})
# Combine the plots into a single array of plots
combined_plots <- wrap_plots(plots)
# Print the combined plots
print(combined_plots)
combined_plots <- wrap_plots(plots, ncol = 1)
ggsave("combined_plots.pdf", combined_plots, width = 20, height = 20, units = "cm")
rb_plot <- ggplot(rb_df_filtered, aes(x = covariate.value, y = estimate, group = topic_label, color = as.factor(topic_label))) +
geom_line() +
theme_minimal() + # Assuming theme_calc() was a typo; using theme_minimal() instead
theme(legend.position = "right",
plot.title = element_text(hjust = 0.5)) + # Center the title
labs(title = "R&B", x = "Release Year", y = "Expected Topic Proportions", color = "Topic")
print(rb_plot)
ggsave("rb_plot.png", rb_plot, width = 20, height = 20, units = "cm")
ggsave("rb_plot.png", rb_plot, width = 20, height = 15, units = "cm")
print(pop_plot)
rb_plot <- ggplot(rb_df_filtered, aes(x = covariate.value, y = estimate, group = topic_label, color = as.factor(topic_label))) +
geom_line() +
theme_minimal() + # Assuming theme_calc() was a typo; using theme_minimal() instead
theme(legend.position = "right",
plot.title = element_text(hjust = 0.5)) + # Center the title
labs(title = "R&B", x = "Release Year", y = "Expected Topic Proportions", color = "Topic")
print(rb_plot)
ggsave("rb_plot.png", rb_plot, width = 20, height = 15, units = "cm")
pop_plot <- ggplot(pop_df_filtered, aes(x = covariate.value, y = estimate, group = topic_label, color = as.factor(topic_label))) +
geom_line() +
theme_minimal() + # Assuming theme_calc() was a typo; using theme_minimal() instead
theme(legend.position = "right",
plot.title = element_text(hjust = 0.5)) + # Center the title
labs(title = "Pop", x = "Release Year", y = "Expected Topic Proportions", color = "Topic")
print(pop_plot)
ggsave("pop_plot.png", rb_plot, width = 20, height = 20, units = "cm")
rap_plot <- ggplot(rap_df_filtered, aes(x = covariate.value, y = estimate, group = topic_label, color = as.factor(topic_label))) +
geom_line() +
theme_minimal() + # Assuming theme_calc() was a typo; using theme_minimal() instead
theme(legend.position = "right",
plot.title = element_text(hjust = 0.5)) + # Center the title
labs(title = "Rap", x = "Release Year", y = "Expected Topic Proportions", color = "Topic")
print(rap_plot)
ggsave("rap_plot.png", rb_plot, width = 20, height = 20, units = "cm")
country_plot <- ggplot(country_df_filtered, aes(x = covariate.value, y = estimate, group = topic_label, color = as.factor(topic_label))) +
geom_line() +
theme_minimal() + # Assuming theme_calc() was a typo; using theme_minimal() instead
theme(legend.position = "right",
plot.title = element_text(hjust = 0.5)) + # Center the title
labs(title = "Country", x = "Release Year", y = "Expected Topic Proportions", color = "Topic")
print(country_plot)
ggsave("country_plot.png", rb_plot, width = 20, height = 20, units = "cm")
# Adjust legend size
legend_theme <- theme(legend.position = "bottom")
# Plot for rock genre
rock_plot <- ggplot(rock_df_filtered, aes(x = covariate.value, y = estimate, group = topic_label, color = as.factor(topic_label))) +
geom_line() +
theme_minimal() +
theme(legend.position = c(1, 0), legend.justification = c(1, 0)) + # Place legend in bottom right corner
labs(title = NULL, x = NULL, y = "Expected Topic Proportions", color = "Topic")
# Plot for R&B genre
rb_plot <- ggplot(rb_df_filtered, aes(x = covariate.value, y = estimate, group = topic_label, color = as.factor(topic_label))) +
geom_line() +
theme_minimal() +
theme(axis.title.y = element_blank(), axis.title.x = element_blank(), legend.position = "none") + # Remove legend and axis labels
labs(title = NULL, x = NULL, y = NULL, color = NULL)
# Plot for pop genre
pop_plot <- ggplot(pop_df_filtered, aes(x = covariate.value, y = estimate, group = topic_label, color = as.factor(topic_label))) +
geom_line() +
theme_minimal() +
theme(axis.title.y = element_blank(), axis.title.x = element_blank(), legend.position = "none") + # Remove legend and axis labels
labs(title = NULL, x = NULL, y = NULL, color = NULL)
# Plot for rap genre
rap_plot <- ggplot(rap_df_filtered, aes(x = covariate.value, y = estimate, group = topic_label, color = as.factor(topic_label))) +
geom_line() +
theme_minimal() +
theme(axis.title.y = element_blank(), axis.title.x = element_blank(), legend.position = "none") + # Remove legend and axis labels
labs(title = NULL, x = NULL, y = NULL, color = NULL)
# Plot for country genre
country_plot <- ggplot(country_df_filtered, aes(x = covariate.value, y = estimate, group = topic_label, color = as.factor(topic_label))) +
geom_line() +
theme_minimal() +
theme(axis.title.y = element_blank(), axis.title.x = element_blank(), legend.position = "none") + # Remove legend and axis labels
labs(title = NULL, x = NULL, y = NULL, color = NULL)
# Arrange plots in a grid with a small legend
grid.arrange(rock_plot + theme(axis.title.y = element_text(angle = 90, vjust = 0.5)),
rb_plot,
pop_plot,
rap_plot,
country_plot + legend_theme,
ncol = 3,
widths = c(1, 1, 1),
heights = c(1, 1, 1))
rock_plot <- ggplot(rock_df_filtered, aes(x = covariate.value, y = estimate, group = topic_label, color = as.factor(topic_label))) +
geom_line() +
theme_minimal() +
theme(legend.position = "right",
plot.title = element_text(hjust = 0.5),
legend.text = element_text(size = 8)) + # Adjust legend text size here
labs(title = "Rock", x = "Release Year", y = "Expected Topic Proportions", color = "Topic")
print(rock_plot)
# Save the plot with adjusted width and height for a wider image
ggsave("rock_plot.png", rock_plot, width = 30, height = 15, units = "cm")
rm(list=ls())
# Load data
load(file.path(DIR, '../../data/new model.RData'))
library(sf)
library(tidyverse)
library(stm)
library(topicmodels)
library(lda)
library(quanteda)
library(quanteda.textplots)
library(slam)
library(quanteda)
library(dplyr)
library(ggplot2)
library(tidystm)
library(RColorBrewer)
library(ggthemes)
library(gridExtra)
library(tidytext)
library(patchwork)
# Define the color palette
my_palette <- brewer.pal(9, "Set1")
# Set directory
DIR <- '.'
devtools::install_github("mikajoh/tidystm", dependencies = TRUE)
devtools::install_github("milesdwilliams15/Better-Graphics-for-the-stm-Package-in-R", dependencies = TRUE)
library(devtools)
devtools::install_github("mikajoh/tidystm", dependencies = TRUE)
devtools::install_github("milesdwilliams15/Better-Graphics-for-the-stm-Package-in-R", dependencies = TRUE)
# Load data
load(file.path(DIR, '../../data/new model.RData'))
library(sf)
library(tidyverse)
library(stm)
library(topicmodels)
library(lda)
library(quanteda)
library(quanteda.textplots)
library(slam)
library(quanteda)
library(dplyr)
library(ggplot2)
library(tidystm)
library(RColorBrewer)
library(ggthemes)
library(gridExtra)
library(tidytext)
library(patchwork)
# Define the color palette
my_palette <- brewer.pal(9, "Set1")
# Set directory
DIR <- '.'
library(sf)
library(tidyverse)
library(stm)
library(topicmodels)
library(lda)
library(quanteda)
library(quanteda.textplots)
library(slam)
library(quanteda)
library(dplyr)
library(ggplot2)
library(tidystm)
library(RColorBrewer)
library(ggthemes)
library(gridExtra)
library(tidytext)
library(patchwork)
# Define the color palette
my_palette <- brewer.pal(9, "Set1")
# Set directory
DIR <- '.'
# Load data
load(file.path(DIR, '../../data/new model.RData'))
load("~/Documents/MASTERS/Text mining/data/new model.Data.RData")
topic_labels <- c("Vocal Expressions", "Love", "Feelings and Friendship", "Conversational and Family",
"Journey", "Dark Imagery", "Aspiration", "Party", "Male Terms", "Change and Departure",
"Desire", "Expletives", "Reflection", "Spirituality", "Sociopolitical", "Romance",
"Street Life and Expletives", "Tonight", "Exclamations", "Knowledge")
# Plot topic proportions
td_gamma <- tidy(stm_model, matrix = "gamma",
document_names = rownames(dfm_lyricsCorpus_filtered))
td_beta <- tidy(stm_model)
top_terms <- td_beta %>%
arrange(beta) %>%
group_by(topic) %>%
top_n(7, beta) %>%
arrange(-beta) %>%
select(topic, term) %>%
summarise(terms = list(term)) %>%
mutate(terms = map(terms, paste, collapse = ", ")) %>%
unnest()
new_names <- c("Vocal Expressions", "Love", "Feelings and Friendship", "Conversational and Family",
"Journey", "Dark Imagery", "Aspiration", "Party", "Male Terms", "Change and Departure",
"Desire", "Expletives", "Reflection", "Spirituality", "Sociopolitical", "Romance",
"Street Life and Expletives", "Tonight", "Exclamations", "Knowledge")
top_terms$topic_label <- new_names
gamma_terms <- td_gamma %>%
group_by(topic) %>%
summarise(gamma = mean(gamma)) %>%
arrange(desc(gamma)) %>%
left_join(top_terms, by = "topic") %>%
mutate(topic = paste0("Topic ", topic),
topic = reorder(topic, gamma))
gamma_terms %>%
top_n(20, gamma) %>%
mutate(topic_label = factor(topic_label, levels = rev(unique(topic_label)))) %>%
ggplot(aes(topic_label, gamma, label = terms, fill = topic_label)) +
geom_col(show.legend = FALSE) +
geom_text(hjust = 0, nudge_y = 0.0005, size = 3) +
coord_flip() +
scale_y_continuous(expand = c(0,0),
limits = c(0, 0.22)) +
theme_calc() +
theme(plot.title = element_text(size = 16),
plot.subtitle = element_text(size = 13),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
labs(x = NULL, y = expression("Expected Topic Proportions"))
ggsave("../figures/Topic proportions.png", width = 23, height = 15, units = "cm")
labelTopics(stm_model, n = 7)
# Estimate time effect
time_effect <- estimateEffect(1:20 ~ s(date), stm_model, meta = meta_data, uncertainty = "Global")
effect <- extract.estimateEffect(time_effect, "date", model = stm_model, method = "pointestimate")
# Add topic labels
effect <- effect %>%
mutate(topic_label = topic_labels[topic])
# Add overall topic proportions
gamma_terms_subset <- gamma_terms[, c("topic_label", "gamma")]
effect <- merge(effect, gamma_terms_subset , by = "topic_label", all.x = TRUE)
# All topics over time
topics_data <- effect
topics_data <- topics_data %>% arrange(desc(gamma))
topics_data$topic_label <- factor(topics_data$topic_label, levels = unique(topics_data$topic_label))
ggplot(topics_data, aes(x = covariate.value, y = estimate, group = topic, color = as.factor(topic))) +
geom_line() +
geom_line(aes(y = ci.lower), linetype = "dashed") +
geom_line(aes(y = ci.upper), linetype = "dashed") +
theme_calc() +
theme(legend.position = "none",
strip.text.x = element_text(size = 14, face = "bold")) +  # Adjust strip text size and make it bold
labs(x = "Release Year", y = "Expected Topic Proportions", color = "Topic") +
facet_wrap(~ topic_label, ncol = 5)
# extract network
devtools::install_github('cschwem2er/stminsights')
library(stminsights)
library(ggraph)
library(tidygraph)
library(quanteda)
library(igraph)
stm_corrs <- get_network(model = stm_model,
method = 'simple',
labels = topic_labels,
cutoff = 0.001,
cutiso = TRUE)
# Ensure edge weights are positive and non-NA
E(stm_corrs)$weight <- ifelse(E(stm_corrs)$weight <= 0 | is.na(E(stm_corrs)$weight), 0.1, E(stm_corrs)$weight)
sorted_gamma_terms <- gamma_terms %>%
mutate(topic_number = as.numeric(str_extract(topic, "\\d+"))) %>%
arrange(topic_number) %>%
select(-topic_number)  # Remove the auxiliary column after sorting
V(stm_corrs)$proportion <- sorted_gamma_terms$gamma
my_graph <- ggraph(stm_corrs, layout = "fr") +
geom_edge_link(aes(edge_alpha = weight), show.legend = FALSE) +
geom_node_point(aes(size = proportion, color = as.factor(name)), show.legend = FALSE) + # Node size based on topic proportion
geom_node_text(aes(label = name), repel = TRUE, check_overlap = TRUE, vjust = 1, hjust = 1, fontface = "bold") +  # Make text bold
scale_size(range = c(1, 10)) + # Adjust size scale as needed
theme_graph()
my_graph
ggsave("../figures/network graph.png", plot = my_graph, width = 10, height = 8, dpi = 300)
genre_effect <- estimateEffect(1:20 ~ genre, stm_model, meta = meta_data, uncertainty = "Global")
effect <- extract.estimateEffect(genre_effect, "genre", model = stm_model, method = "pointestimate")
effect <- effect %>%
mutate(topic_label = topic_labels[topic])
effect_filtered <- effect %>%
filter(covariate.value != "misc")
ggplot(effect_filtered, aes(x = covariate.value, y = estimate, fill = as.factor(covariate.value))) +
geom_col() +
theme_minimal() +
theme(
#legend.position = "none",
axis.title = element_text(size = 8), # Decrease font size for axis titles
axis.text = element_blank(), # Decrease font size for axis text (ticks)
strip.text = element_text(size = 7) # Decrease font size for facet titles
) +
labs(x = "Genre", y = "Expected Topic Proportions", fill = "Topic") +
facet_wrap(~ topic_label, ncol = 5)
meta_data$genre <- as.factor(meta_data$genre)
meta_data$date <- as.numeric(meta_data$date)
# Estimate genre*time effect
time_genre_interaction_effect <- estimateEffect(~ genre * s(date), stm_model, meta = meta_data, uncertainty = "Global")
effect <- lapply(unique(meta_data$genre), function(i) {
extract.estimateEffect(x = time_genre_interaction_effect,
covariate = "date",
method = "pointestimate",
model = stm_model,
labeltype = "Highest",
n = 4,
moderator = "genre",
moderator.value = i)
})
rock_df <- effect[[1]]
rb_df <- effect[[2]]
pop_df <- effect[[3]]
misc_df <- effect[[4]]
rap_df <- effect[[5]]
country_df <- effect[[6]]
# First, calculate the average effect for each topic
#rock
average_gamma_rock <- rock_df %>%
group_by(topic) %>%
summarise(avg_gamma = mean(estimate, na.rm = TRUE)) %>%
arrange(desc(avg_gamma)) %>%
slice(1:5)
# Then, filter your main dataframe to only include these top 5 topics
rock_df_filtered <- rock_df %>%
filter(topic %in% average_gamma_rock$topic)
#rb
average_gamma_rb <- rb_df %>%
group_by(topic) %>%
summarise(avg_gamma = mean(estimate, na.rm = TRUE)) %>%
arrange(desc(avg_gamma))  %>%
slice(1:5)
# Then, filter your main dataframe to only include these top 5 topics
rb_df_filtered <- rb_df %>%
filter(topic %in% average_gamma_rb$topic)
#pop
average_gamma_pop <- pop_df %>%
group_by(topic) %>%
summarise(avg_gamma = mean(estimate, na.rm = TRUE)) %>%
arrange(desc(avg_gamma)) %>%
slice(1:5) # Select the top 5 topics based on average gamma
# Then, filter your main dataframe to only include these top 5 topics
pop_df_filtered <- pop_df %>%
filter(topic %in% average_gamma_pop$topic)
#rap
average_gamma_rap <- rap_df %>%
group_by(topic) %>%
summarise(avg_gamma = mean(estimate, na.rm = TRUE)) %>%
arrange(desc(avg_gamma)) %>%
slice(1:5) # Select the top 5 topics based on average gamma
# Then, filter your main dataframe to only include these top 5 topics
rap_df_filtered <- rap_df %>%
filter(topic %in% average_gamma_rap$topic)
#country
average_gamma_country <- country_df %>%
group_by(topic) %>%
summarise(avg_gamma = mean(estimate, na.rm = TRUE)) %>%
arrange(desc(avg_gamma)) %>%
slice(1:5) # Select the top 5 topics based on average gamma
# Then, filter your main dataframe to only include these top 5 topics
country_df_filtered <- country_df %>%
filter(topic %in% average_gamma_country$topic)
rock_plot <- ggplot(rock_df_filtered, aes(x = covariate.value, y = estimate, group = topic_label, color = as.factor(topic_label))) +
geom_line() +
theme_minimal() +
theme(legend.position = "right",
plot.title = element_text(hjust = 0.5),
legend.text = element_text(size = 8)) + # Adjust legend text size here
labs(title = "Rock", x = "Release Year", y = "Expected Topic Proportions", color = "Topic")
print(rock_plot)
View(rock_df_filtered)
View(time_genre_interaction_effect)
View(rock_df)
rock_df <- rock_dft %>%
mutate(topic_label = topic_labels[topic])
rock_df <- rock_df %>%
mutate(topic_label = topic_labels[topic])
pop_df <- effect[[3]]
rock_df <- effect[[1]]
rock_df <- rock_df %>%
mutate(topic_label = topic_labels[topic])
rb_df <- effect[[2]]
rb_df <- rb_df %>%
mutate(topic_label = topic_labels[topic])
pop_df <- effect[[3]]
pop_df <- pop_df %>%
mutate(topic_label = topic_labels[topic])
misc_df <- effect[[4]]
misc_df <- misc_df %>%
mutate(topic_label = topic_labels[topic])
rap_df <- effect[[5]]
rap_df <- rap_df %>%
mutate(topic_label = topic_labels[topic])
country_df <- effect[[6]]
country_df<- country_df %>%
mutate(topic_label = topic_labels[topic])
# First, calculate the average effect for each topic
#rock
average_gamma_rock <- rock_df %>%
group_by(topic) %>%
summarise(avg_gamma = mean(estimate, na.rm = TRUE)) %>%
arrange(desc(avg_gamma)) %>%
slice(1:5)
# Then, filter ydataframe to only include these top 5 topics
rock_df_filtered <- rock_df %>%
filter(topic %in% average_gamma_rock$topic)
#rb
average_gamma_rb <- rb_df %>%
group_by(topic) %>%
summarise(avg_gamma = mean(estimate, na.rm = TRUE)) %>%
arrange(desc(avg_gamma))  %>%
slice(1:5)
# Then, filter  dataframe to only include these top 5 topics
rb_df_filtered <- rb_df %>%
filter(topic %in% average_gamma_rb$topic)
#pop
average_gamma_pop <- pop_df %>%
group_by(topic) %>%
summarise(avg_gamma = mean(estimate, na.rm = TRUE)) %>%
arrange(desc(avg_gamma)) %>%
slice(1:5) # Select the top 5 topics based on average gamma
# Then, filter dataframe to only include these top 5 topics
pop_df_filtered <- pop_df %>%
filter(topic %in% average_gamma_pop$topic)
#rap
average_gamma_rap <- rap_df %>%
group_by(topic) %>%
summarise(avg_gamma = mean(estimate, na.rm = TRUE)) %>%
arrange(desc(avg_gamma)) %>%
slice(1:5) # Select the top 5 topics based on average gamma
# Then, filter dataframe to only include these top 5 topics
rap_df_filtered <- rap_df %>%
filter(topic %in% average_gamma_rap$topic)
#country
average_gamma_country <- country_df %>%
group_by(topic) %>%
summarise(avg_gamma = mean(estimate, na.rm = TRUE)) %>%
arrange(desc(avg_gamma)) %>%
slice(1:5) # Select the top 5 topics based on average gamma
# Then, filter dataframe to only include these top 5 topics
country_df_filtered <- country_df %>%
filter(topic %in% average_gamma_country$topic)
rock_plot <- ggplot(rock_df_filtered, aes(x = covariate.value, y = estimate, group = topic_label, color = as.factor(topic_label))) +
geom_line() +
theme_minimal() +
theme(legend.position = "right",
plot.title = element_text(hjust = 0.5),
legend.text = element_text(size = 8)) + # Adjust legend text size here
labs(title = "Rock", x = "Release Year", y = "Expected Topic Proportions", color = "Topic")
print(rock_plot)
# Save the plot with adjusted width and height for a wider image
ggsave("rock_plot.png", rock_plot, width = 30, height = 15, units = "cm")
rb_plot <- ggplot(rb_df_filtered, aes(x = covariate.value, y = estimate, group = topic_label, color = as.factor(topic_label))) +
geom_line() +
theme_minimal() + # Assuming theme_calc() was a typo; using theme_minimal() instead
theme(legend.position = "right",
plot.title = element_text(hjust = 0.5)) + # Center the title
labs(title = "R&B", x = "Release Year", y = "Expected Topic Proportions", color = "Topic")
print(rb_plot)
ggsave("rb_plot.png", rb_plot, width = 20, height = 15, units = "cm")
pop_plot <- ggplot(pop_df_filtered, aes(x = covariate.value, y = estimate, group = topic_label, color = as.factor(topic_label))) +
geom_line() +
theme_minimal() + # Assuming theme_calc() was a typo; using theme_minimal() instead
theme(legend.position = "right",
plot.title = element_text(hjust = 0.5)) + # Center the title
labs(title = "Pop", x = "Release Year", y = "Expected Topic Proportions", color = "Topic")
print(pop_plot)
ggsave("pop_plot.png", rb_plot, width = 20, height = 20, units = "cm")
rap_plot <- ggplot(rap_df_filtered, aes(x = covariate.value, y = estimate, group = topic_label, color = as.factor(topic_label))) +
geom_line() +
theme_minimal() + # Assuming theme_calc() was a typo; using theme_minimal() instead
theme(legend.position = "right",
plot.title = element_text(hjust = 0.5)) + # Center the title
labs(title = "Rap", x = "Release Year", y = "Expected Topic Proportions", color = "Topic")
print(rap_plot)
ggsave("rap_plot.png", rb_plot, width = 20, height = 20, units = "cm")
country_plot <- ggplot(country_df_filtered, aes(x = covariate.value, y = estimate, group = topic_label, color = as.factor(topic_label))) +
geom_line() +
theme_minimal() + # Assuming theme_calc() was a typo; using theme_minimal() instead
theme(legend.position = "right",
plot.title = element_text(hjust = 0.5)) + # Center the title
labs(title = "Country", x = "Release Year", y = "Expected Topic Proportions", color = "Topic")
print(country_plot)
ggsave("country_plot.png", rb_plot, width = 20, height = 20, units = "cm")
